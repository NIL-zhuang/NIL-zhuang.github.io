<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>AI - Category - 抓鱼 zzy's Blog</title><link>https://nil-zhuang.github.io/categories/ai/</link><description>AI - Category - 抓鱼 zzy's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ziyuan.zhuang@smail.nju.edu.cn (Nil Zhuang)</managingEditor><webMaster>ziyuan.zhuang@smail.nju.edu.cn (Nil Zhuang)</webMaster><copyright>Ziyuan Zhuang 2022</copyright><lastBuildDate>Wed, 25 Jan 2023 16:21:21 +0800</lastBuildDate><atom:link href="https://nil-zhuang.github.io/categories/ai/" rel="self" type="application/rss+xml"/><item><title>设计模式-以深度学习为例-创建型模式</title><link>https://nil-zhuang.github.io/2023/01/design_pattern_dl_generator/</link><pubDate>Wed, 25 Jan 2023 16:21:21 +0800</pubDate><author>nil zhuang</author><guid>https://nil-zhuang.github.io/2023/01/design_pattern_dl_generator/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://lemonzzy.oss-cn-hangzhou.aliyuncs.com/typora/202301251625395.png" referrerpolicy="no-referrer">
            </div><h1 id="设计模式---以深度学习为例---创建型模式">设计模式 - 以深度学习为例 - 创建型模式</h1>
<p>在 <a href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener noreffer ">常用设计模式</a> 中，介绍了一系列创建型模式、结构型模式和行为模式的设计模式，对日常代码质量提升有很大帮助。但它们往往以 JAVA 语言的工程项目为例，我们在这里以深度学习的模型搭建、训练、推理、部署为例，解释面向对象编程中 22 中设计模式的基本原理。</p>
<p>设计模式分为</p>
<ul>
<li>创建型模式：工厂方法，抽象工厂，生成器，原型，单例</li>
<li>结构型模式：适配器，桥接，组合，装饰，外观，享元，代理</li>
<li>行为模式：责任链，命令，迭代器，中介者，备忘录，观察者，状态，策略，模板方法，访问者</li>
</ul>
<p>本文介绍创建型模式在深度学习中的应用。创建型模式提供创建对象的机制，能够提升已有代码的灵活性和可复用性。</p>
<hr>
<h2 id="工厂方法-factory-method">工厂方法 Factory Method</h2>
<p>工厂方法在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。
</p>
<ul>
<li>产品 Product 对接口进行声明，对于创建者或者由其子类构建的对象，接口是通用的</li>
<li>创建者类声明返回 Product 对象的工厂方法，返回类型和产品接口相匹配</li>
</ul>
<h3 id="使用场景">使用场景</h3>
<ol>
<li>将产品的创建与实际的使用分离 → 只需要开发新的 ConcreteCreator，重写其 <code>createProduct</code> 方法。</li>
<li>利用继承扩展软件库和框架默认行为</li>
</ol>
<h3 id="效果">效果</h3>
<ol>
<li>避免创建者和具体产品之间的耦合</li>
<li>单一职责原则，将产品创建代码放在程序的单一位置，使代码更易维护</li>
<li>开闭原则，无需修改现有客户端代码，就可以引入新的产品类型</li>
<li>但是工厂方法会引入很多新的子类，代码变得复杂</li>
</ol>
<h3 id="深度学习例子">深度学习例子</h3>
<p>例如我们在整合模型到同一个框架中，其一是自回归模型 Transformer，其二是对抗网络 GAN，二者的结构不同，所以训练过程差异很大。Transformer 只有一个模型，而 GAN 包含了 Generator 和 Discriminator。但同时，两个任务有相同的超参初始化，checkpoint 保存，数据集读取等任务。</p>
<p>在模型构建中，我们有一个公共 Product <code>nn.Module</code>，基于此构建了 <code>Transformer</code> 和 <code>GAN</code> 两个具体产品。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Transformer</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Transformer&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GAN</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;GAN&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在模型训练中，我们使用一个公共方法 <code>Trainer</code>，包含了 <code>build_model</code> 方法来创建相应的模型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Trainer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_model</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># train the model</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GANTrainer</span><span class="p">(</span><span class="n">Trainer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_model</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">GAN</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TransformerTrainer</span><span class="p">(</span><span class="n">Trainer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_model</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Transformer</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在实际使用中，通过调用 trainer 的模型训练接口，就可以实现训练。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train_my_model</span><span class="p">(</span><span class="n">trainer</span><span class="p">:</span><span class="n">Trainer</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">trainer</span><span class="o">.</span><span class="n">train_model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="抽象工厂-abstract-factory">抽象工厂 Abstract Factory</h2>
<p></p>
<ul>
<li>抽象产品 Abstract Product 是构成系列产品的不同但相关的产品声明接口</li>
<li>抽象工厂 Abstract Factory 接口声明一组创建抽象产品的方法</li>
<li>具体工厂会对具体产品初始化，但构造方法的签名必须返回相应的抽象产品。客户端只需要调用抽象接口就能返回相应的抽象产品，客户端代码就不会和工厂创建的特定产品变体耦合。</li>
</ul>
<h3 id="使用场景-1">使用场景</h3>
<ul>
<li>代码需要和多个不同序列的相关产品交互，不希望代码基于产品的具体类进行构建</li>
<li>有一个基于 <strong>一组抽象方法</strong> 的类抽象工厂提供一个接口来创建每个系列产品的对象</li>
<li>以不同的产品类型变体维度绘制矩阵 → 为所有产品声明抽象产品接口，让具体产品实现具体接口 → 声明抽象工厂接口，每个具体工厂实现接口 → 将代码中产品构造函数替换成工厂方法的构造函数</li>
</ul>
<h3 id="效果-1">效果</h3>
<ul>
<li>单一职责原则 &amp; 开闭原则</li>
<li>引入多种接口和类，代码变复杂</li>
</ul>
<h3 id="深度学习例子-1">深度学习例子</h3>
<p>抽象工厂可以理解为多维的工厂方法，一系列相互依赖的对象。例如我们实现了 GAN 和 Transformer 两种模型，为了测试我们需要在两种数据集 translation 和 paraphrase 上测试，两个 trainer 就变成了 translation+transformer，paraphrase+GAN 这样两组相互依赖的对象。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Translation</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">translation_pairs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Paraphrase</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">paraphrase_lists</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于网络，如上定义两个深度学习模型 Transformer 和 GAN</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Transformer</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Transformer&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GAN</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;GAN&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后，对于训练模型的 Trainer，我们需要同时实现数据集和网络两个不同维度模型的组合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Trainer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_network</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TransformerTranslationTrainer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_network</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Transformer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Translation</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GANParaphraseTrainer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_network</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">GAN</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">build_dataset</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Paraphrase</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在实际的使用中，我们只需要创建一个相应的 Trainer，调用对应的训练 api 即可。</p>
<p>例如在 [[Fairseq]] 框架中，对应的 Task 就是一个很好的抽象工厂模式，它调度了模型和数据集的搭建。</p>
<h2 id="生成器-builder">生成器 Builder</h2>
<p></p>
<ul>
<li>生成器 Builder 接口声明所有类型生成器中通用的产品构造步骤</li>
<li>产品是最终生成的对象</li>
<li>主管 Director 定义调用构造步骤的顺序</li>
<li>客户端 Client 将某个生成器对象与 Director 关联</li>
</ul>
<h3 id="使用场景-2">使用场景</h3>
<ol>
<li>重叠的多种构造函数出现</li>
<li>使用代码创建不同形式的产品，过程相似细节不同</li>
<li>使用生成器构造组合树或其他复杂对象</li>
</ol>
<h3 id="效果-2">效果</h3>
<ol>
<li>分步创建对象，暂缓创建步骤</li>
<li>生成不同形式的产品，复用相同制造代码</li>
<li>单一直则原则，将复杂代码从业务逻辑分离</li>
<li>会增加多个类，代码整体复杂度增加</li>
</ol>
<h3 id="深度学习例子-2">深度学习例子</h3>
<p>例如普通分类模型，包括多种模型结构，如 Linear，MLP，CNN 等，都由 Linear 层和 Conv 层这两个基本单元构成。可以使用生成器模式来实现模型层级的搭建。</p>
<p>首先定义一个 Network 类和 Builder 类，来处理向基类中添加层</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Network</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">this</span><span class="o">.</span><span class="n">network</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Builder</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">addLinearLayer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">addConvLayer</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="原型-prototype">原型 Prototype</h2>
<h3 id="使用场景-3">使用场景</h3>
<h3 id="效果-3">效果</h3>
<h3 id="深度学习例子-3">深度学习例子</h3>
<h2 id="单例-singleton">单例 Singleton</h2>
<h3 id="使用场景-4">使用场景</h3>
<h3 id="效果-4">效果</h3>
<h3 id="深度学习例子-4">深度学习例子</h3>
]]></description></item><item><title>⚡️+🤗：Transformers + Pytorch Lightning 最佳实战</title><link>https://nil-zhuang.github.io/2022/11/hf_pl/</link><pubDate>Mon, 14 Nov 2022 11:50:04 +0800</pubDate><author>nil zhuang</author><guid>https://nil-zhuang.github.io/2022/11/hf_pl/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://lemonzzy.oss-cn-hangzhou.aliyuncs.com/typora/202211141605838.png" referrerpolicy="no-referrer">
            </div><h1 id="transformers--pytorch-lightning-最佳实战">⚡️+🤗：Transformers + Pytorch Lightning 最佳实战</h1>
<h2 id="背景">背景</h2>
<p>Pytorch Lightning 是 pytorch 的一个上层封装，类似于 Keras 之于 tensorflow。我们希望使用这样一个优秀的框架来实现对 huggingface 模型的快速训练和开发测试。</p>
<h2 id="数据集-dataset">数据集 Dataset</h2>
<p>对于任何一个 dataset，将其拆分为有监督训练的 src 和 tgt 两个 label</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataModule</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tokenizer</span><span class="p">:</span> <span class="n">PreTrainedTokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">source_max_token_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">target_max_token_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; Pytorch Dataset Module for input data  
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:            data (pd.DataFrame): Dataframe containing input data            tokenizer (PreTrainedTokenizer): Tokenizer for encoding input data            source_max_token_len (int): Max token length for source text            target_max_token_len (int): Max token length for target text        &#34;&#34;&#34;</span>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">tokenizer</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">source_max_token_len</span> <span class="o">=</span> <span class="n">source_max_token_len</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">target_max_token_len</span> <span class="o">=</span> <span class="n">target_max_token_len</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">data_row</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">src_text_encoding</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">data_row</span><span class="p">[</span><span class="s2">&#34;src&#34;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">            <span class="n">max_length</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">source_max_token_len</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">padding</span><span class="o">=</span><span class="s2">&#34;max_length&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">truncation</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&#34;pt&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">return_attention_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">add_special_tokens</span><span class="o">=</span><span class="kc">True</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tgt_text_encoding</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">data_row</span><span class="p">[</span><span class="s1">&#39;tgt&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">            <span class="n">max_length</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">target_max_token_len</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">padding</span><span class="o">=</span><span class="s2">&#34;max_length&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">truncation</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">return_attention_mask</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">return_tensors</span><span class="o">=</span><span class="s2">&#34;pt&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">add_special_tokens</span><span class="o">=</span><span class="kc">True</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">tgt_text_encoding</span><span class="p">[</span><span class="s2">&#34;input_ids&#34;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="n">labels</span><span class="p">[</span><span class="n">labels</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">source_text_input_ids</span><span class="o">=</span><span class="n">src_text_encoding</span><span class="p">[</span><span class="s2">&#34;input_ids&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">source_text_attention_mask</span><span class="o">=</span><span class="n">src_text_encoding</span><span class="p">[</span><span class="s2">&#34;attention_mask&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">labels_attention_mask</span><span class="o">=</span><span class="n">tgt_text_encoding</span><span class="p">[</span><span class="s2">&#34;attention_mask&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后构建 dataset module，组合 training data 和 valid data</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DatasetModule</span><span class="p">(</span><span class="n">pl</span><span class="o">.</span><span class="n">LightningDataModule</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">train_df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">valid_df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tokenizer</span><span class="p">:</span> <span class="n">PreTrainedTokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">source_max_token_len</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">target_max_token_len</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">num_workers</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">shuffle</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">tokenizer</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">train_df</span> <span class="o">=</span> <span class="n">train_df</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">valid_df</span> <span class="o">=</span> <span class="n">valid_df</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">batch_size</span> <span class="o">=</span> <span class="n">batch_size</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">source_max_token_len</span> <span class="o">=</span> <span class="n">source_max_token_len</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">target_max_token_len</span> <span class="o">=</span> <span class="n">target_max_token_len</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">num_workers</span> <span class="o">=</span> <span class="n">num_workers</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">shuffle</span> <span class="o">=</span> <span class="n">shuffle</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stage</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">DataModule</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">train_df</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">source_max_token_len</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">target_max_token_len</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">valid_dataset</span> <span class="o">=</span> <span class="n">DataModule</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">valid_df</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">source_max_token_len</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">target_max_token_len</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">train_dataloader</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">DataLoader</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">train_dataset</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">batch_size</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">batch_size</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">shuffle</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">shuffle</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">num_workers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_workers</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">pin_memory</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">val_dataloader</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">DataLoader</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">valid_dataset</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">batch_size</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">batch_size</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">num_workers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_workers</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">pin_memory</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_dataloader</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">DataLoader</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">valid_dataset</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">batch_size</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">batch_size</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">num_workers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_workers</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">pin_memory</span><span class="o">=</span><span class="kc">True</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="模型">模型</h2>
<p>我们以 T5 为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">T5Seq2SeqLM</span><span class="p">(</span><span class="n">T5ForConditionalGeneration</span><span class="p">,</span> <span class="n">ABC</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">T5Config</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">hidden_state_sample</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hidden_states</span><span class="p">,</span> <span class="n">attention_mask</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AutoEncoderOutput</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; Sample from the hidden state distribution  
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>        <span class="k">return</span> <span class="n">AutoEncoderOutput</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">hidden_states</span><span class="o">=</span><span class="n">hidden_states</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">attention_mask</span><span class="o">=</span><span class="n">attention_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">compute_loss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lm_logits</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">ae_output</span><span class="p">:</span> <span class="n">AutoEncoderOutput</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; Compute the loss  
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:            lm_logits (torch.FloatTensor): logits from the language model            labels (torch.LongTensor): labels for the language model            ae_output (AutoEncoderOutput): output from the autoencoder        Returns:            torch.FloatTensor: loss        &#34;&#34;&#34;</span>        <span class="n">loss</span> <span class="o">=</span> <span class="kc">None</span>  
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">labels</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">            <span class="n">loss_fct</span> <span class="o">=</span> <span class="n">CrossEntropyLoss</span><span class="p">(</span><span class="n">ignore_index</span><span class="o">=-</span><span class="mi">100</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">loss_fct</span><span class="p">(</span><span class="n">lm_logits</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">lm_logits</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)),</span> <span class="n">labels</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">loss</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">prepare_inputs_for_generation</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">input_ids</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">past</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">attention_mask</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">head_mask</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">decoder_head_mask</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="c1"># cross_attn_head_mask=None,  </span>
</span></span><span class="line"><span class="cl">            <span class="n">use_cache</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">encoder_outputs</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="o">**</span><span class="n">kwargs</span>  
</span></span><span class="line"><span class="cl">    <span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">past</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">            <span class="n">input_ids</span> <span class="o">=</span> <span class="n">input_ids</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">:]</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;decoder_input_ids&#34;</span><span class="p">:</span> <span class="n">input_ids</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;past_key_values&#34;</span><span class="p">:</span> <span class="n">past</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;encoder_outputs&#34;</span><span class="p">:</span> <span class="n">encoder_outputs</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;attention_mask&#34;</span><span class="p">:</span> <span class="n">attention_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;head_mask&#34;</span><span class="p">:</span> <span class="n">head_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;decoder_head_mask&#34;</span><span class="p">:</span> <span class="n">decoder_head_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="c1"># &#34;cross_attn_head_mask&#34;: cross_attn_head_mask,  </span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;use_cache&#34;</span><span class="p">:</span> <span class="n">use_cache</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="训练">训练</h2>
<p>首先我们需要构建一个 HFModel 的基础框架，给 pytorch lightning 调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">HFModel</span><span class="p">(</span><span class="n">pl</span><span class="o">.</span><span class="n">LightningModule</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">model</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">tokenizer</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">average_training_loss</span> <span class="o">=</span> <span class="kc">None</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">average_validation_loss</span> <span class="o">=</span> <span class="kc">None</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="n">config</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_ids</span><span class="p">,</span> <span class="n">attention_mask</span><span class="p">,</span> <span class="n">decoder_attention_mask</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">attention_mask</span><span class="o">=</span><span class="n">attention_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">decoder_attention_mask</span><span class="o">=</span><span class="n">decoder_attention_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">output</span><span class="o">.</span><span class="n">loss</span><span class="p">,</span> <span class="n">output</span><span class="o">.</span><span class="n">logits</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">compute_loss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">input_ids</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="s1">&#39;source_text_input_ids&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="n">attention_mask</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="s1">&#39;source_text_attention_mask&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="n">labels_attention_mask</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="s1">&#39;labels_attention_mask&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="p">,</span> <span class="n">logits</span> <span class="o">=</span> <span class="bp">self</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">input_ids</span><span class="o">=</span><span class="n">input_ids</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">attention_mask</span><span class="o">=</span><span class="n">attention_mask</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">decoder_attention_mask</span><span class="o">=</span><span class="n">labels_attention_mask</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">loss</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">training_step</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_loss</span><span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&#34;train_loss&#34;</span><span class="p">,</span> <span class="n">loss</span><span class="p">,</span> <span class="n">prog_bar</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">logger</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">on_epoch</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">on_step</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sync_dist</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">loss</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">validation_step</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_loss</span><span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&#34;val_loss&#34;</span><span class="p">,</span> <span class="n">loss</span><span class="p">,</span> <span class="n">prog_bar</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">logger</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">on_epoch</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">on_step</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sync_dist</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">loss</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_step</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_loss</span><span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&#34;test_loss&#34;</span><span class="p">,</span> <span class="n">loss</span><span class="p">,</span> <span class="n">prog_bar</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">logger</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sync_dist</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">loss</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">configure_optimizers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span> <span class="o">=</span> <span class="n">AdamW</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">lr</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;learning_rate&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>        <span class="n">scheduler</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">lr_scheduler</span><span class="o">.</span><span class="n">ReduceLROnPlateau</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">optimizer</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">patience</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;optimizer&#34;</span><span class="p">:</span> <span class="n">optimizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;lr_scheduler&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;scheduler&#34;</span><span class="p">:</span> <span class="n">scheduler</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;monitor&#34;</span><span class="p">:</span> <span class="s2">&#34;val_loss&#34;</span>  
</span></span><span class="line"><span class="cl">            <span class="p">}</span>  
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>transformers 最大的不同在于它的 checkpoint，需要 save_pretrained 和 from_pretrained，因此我们要设计一个单独的 checkpoint 方法，即 HFTrainer</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">HFTrainer</span><span class="p">(</span><span class="n">pl</span><span class="o">.</span><span class="n">Trainer</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">save_checkpoint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filepath</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Path</span><span class="p">],</span> <span class="n">weights_only</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">storage_options</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_global_zero</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">            <span class="n">dpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">filepath</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">lightning_model</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">module</span><span class="o">.</span><span class="n">module</span>  
</span></span><span class="line"><span class="cl">            <span class="n">lightning_model</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">save_pretrained</span><span class="p">(</span><span class="n">dpath</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">lightning_model</span><span class="o">.</span><span class="n">tokenizer</span><span class="o">.</span><span class="n">save_pretrained</span><span class="p">(</span><span class="n">dpath</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后进行数据集构造和训练方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">model</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">train_df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">eval_df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="p">:</span> <span class="n">Dict</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl"><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="n">hf_model</span> <span class="o">=</span> <span class="n">HFModel</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">=</span><span class="n">config</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">dataset</span> <span class="o">=</span> <span class="n">DatasetModule</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">train_df</span><span class="o">=</span><span class="n">train_df</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">valid_df</span><span class="o">=</span><span class="n">eval_df</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">batch_size</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;batch_size&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">source_max_token_len</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;dataset&#39;</span><span class="p">][</span><span class="s1">&#39;source_max_token_len&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">target_max_token_len</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;dataset&#39;</span><span class="p">][</span><span class="s1">&#39;target_max_token_len&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">num_workers</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;dataloader_num_workers&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span>  
</span></span><span class="line"><span class="cl">        <span class="n">RichProgressBar</span><span class="p">(</span><span class="n">refresh_rate</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">        <span class="n">EarlyStopping</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">monitor</span><span class="o">=</span><span class="s2">&#34;val_loss&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">patience</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;early_stop_patience&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">            <span class="n">min_delta</span><span class="o">=</span><span class="mf">0.00</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;min&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)]</span>  
</span></span><span class="line"><span class="cl">    <span class="n">checkpoint_callback</span> <span class="o">=</span> <span class="n">ModelCheckpoint</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">dirpath</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;save_dir&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="p">[</span><span class="s1">&#39;model&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="p">),</span>  
</span></span><span class="line"><span class="cl">        <span class="n">filename</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">{epoch}</span><span class="s2">-</span><span class="si">{step}</span><span class="s2">-</span><span class="si">{val_loss:.2f}</span><span class="s2">-</span><span class="si">{train_loss:.2f}</span><span class="s2">&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">monitor</span><span class="o">=</span><span class="s1">&#39;val_loss&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">callbacks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">checkpoint_callback</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">trainer</span> <span class="o">=</span> <span class="n">HFTrainer</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">=</span><span class="n">pl_logger</span><span class="o">.</span><span class="n">TensorBoardLogger</span><span class="p">(</span><span class="n">save_dir</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;log_dir&#39;</span><span class="p">]),</span>  
</span></span><span class="line"><span class="cl">        <span class="n">callbacks</span><span class="o">=</span><span class="n">callbacks</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">max_epochs</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;max_epoch&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">accelerator</span><span class="o">=</span><span class="s1">&#39;gpu&#39;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s1">&#39;cpu&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">devices</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">precision</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">auto_select_gpus</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">log_every_n_steps</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">strategy</span><span class="o">=</span><span class="n">DDPStrategy</span><span class="p">(</span><span class="n">find_unused_parameters</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">        <span class="n">accumulate_grad_batches</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;train&#39;</span><span class="p">][</span><span class="s1">&#39;accumulate_grad_batches&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">auto_lr_find</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">trainer</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">hf_model</span><span class="p">,</span> <span class="n">dataset</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>